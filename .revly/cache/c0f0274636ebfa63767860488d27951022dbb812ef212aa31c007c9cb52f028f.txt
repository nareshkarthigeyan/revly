Hey there! ðŸ‘‹ 

This diff introduces some really valuable improvements to the code review functionality. The most significant addition is the caching mechanism, which should significantly improve performance for repeated reviews of the same changes. I can see you've also refined the command structure and added better output formatting with glamour rendering. The code is generally clean and well-organized. I've noted a few areas for improvement, primarily around error handling and cache management.

## Code Review

[WARNING] cmd/review.go:95:
Potential nil pointer dereference when glamour renderer fails to initialize
Suggestion:
Move the renderer initialization before the cache check to avoid uninitialized renderer usage later in the code
Explanation:
If `glamour.NewTermRenderer` fails, `renderer` will be nil, but the code continues to use it later, which will cause a panic. The renderer should be fully initialized before proceeding with cache or LLM operations.

[INFO] cmd/review.go:105:
Cache key generation uses raw diff bytes
Suggestion:
Consider hashing the diff string instead of using the raw content as a cache key to ensure consistent key length and avoid potential key collision issues
Explanation:
Using the raw diff bytes as a key might lead to long keys or potential issues with special characters. Hashing the diff (e.g., with SHA256) would provide a consistent, fixed-length key that's safer for cache operations.

[INFO] internals/llm/client.go:81:
Missing context timeout for LLM request
Suggestion:
Add a context with timeout to the LLM call to prevent indefinite blocking
Explanation:
Without a timeout, the application could hang indefinitely if the LLM service is unresponsive. Adding a context with a reasonable timeout (e.g., 30 seconds) improves resilience.

## Suggestions

*   Consider adding unit tests for the new caching functionality to ensure cache hits/misses work correctly
*   Add a command-line flag to optionally bypass the cache for fresh reviews when needed
*   Consider adding cache size limits or expiration to prevent indefinite growth in cache size